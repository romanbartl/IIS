-- MySQL Script generated by MySQL Workbench
-- Pá 5. října 2018, 21:40:44 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema ticketsonline
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `ticketsonline` ;

-- -----------------------------------------------------
-- Schema ticketsonline
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ticketsonline` DEFAULT CHARACTER SET utf8 ;
USE `ticketsonline` ;

-- -----------------------------------------------------
-- Table `ticketsonline`.`Interpret`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Interpret` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Interpret` (
  `idInterpret` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `label` VARCHAR(255) NOT NULL,
  `founded` DATE NULL,
  PRIMARY KEY (`idInterpret`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Album`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Album` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Album` (
  `idAlbum` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `label` VARCHAR(255) NULL,
  `release` DATE NULL,
  `idInterpret` INT NOT NULL,
  PRIMARY KEY (`idAlbum`),
  INDEX `fk_Album_Interpret_idx` (`idInterpret` ASC),
  CONSTRAINT `fk_Album_Interpret`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Genre` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Genre` (
  `idGenre` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`idGenre`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Album_has_Genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Album_has_Genre` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Album_has_Genre` (
  `idAlbum` INT NOT NULL,
  `idGenre` INT NOT NULL,
  PRIMARY KEY (`idAlbum`, `idGenre`),
  INDEX `fk_Album_has_Genre_Genre1_idx` (`idGenre` ASC),
  INDEX `fk_Album_has_Genre_Album1_idx` (`idAlbum` ASC),
  CONSTRAINT `fk_Album_has_Genre_Album1`
    FOREIGN KEY (`idAlbum`)
    REFERENCES `ticketsonline`.`Album` (`idAlbum`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Album_has_Genre_Genre1`
    FOREIGN KEY (`idGenre`)
    REFERENCES `ticketsonline`.`Genre` (`idGenre`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Member`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Member` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Member` (
  `idMember` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `surname` VARCHAR(255) NOT NULL,
  `birth` DATE NULL,
  PRIMARY KEY (`idMember`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Interpret_has_Member`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Interpret_has_Member` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Interpret_has_Member` (
  `idInterpret` INT NOT NULL,
  `idMember` INT NOT NULL,
  PRIMARY KEY (`idInterpret`, `idMember`),
  INDEX `fk_Interpret_has_Member_Member1_idx` (`idMember` ASC),
  INDEX `fk_Interpret_has_Member_Interpret1_idx` (`idInterpret` ASC),
  CONSTRAINT `fk_Interpret_has_Member_Interpret1`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Interpret_has_Member_Member1`
    FOREIGN KEY (`idMember`)
    REFERENCES `ticketsonline`.`Member` (`idMember`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`City`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`City` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`City` (
  `idCity` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`idCity`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Place`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Place` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Place` (
  `idPlace` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `address` VARCHAR(255) NULL,
  `gps` VARCHAR(255) NULL,
  `zipCode` VARCHAR(6) NULL,
  `info` TEXT(1024) NULL,
  `idCity` INT NULL,
  PRIMARY KEY (`idPlace`),
  INDEX `fk_Place_City1_idx` (`idCity` ASC),
  CONSTRAINT `fk_Place_City1`
    FOREIGN KEY (`idCity`)
    REFERENCES `ticketsonline`.`City` (`idCity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Concert`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Concert` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Concert` (
  `idConcert` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `date` DATETIME NOT NULL,
  `capacity` INT NULL,
  `idPlace` INT NOT NULL,
  PRIMARY KEY (`idConcert`),
  INDEX `fk_Concert_Place1_idx` (`idPlace` ASC),
  CONSTRAINT `fk_Concert_Place1`
    FOREIGN KEY (`idPlace`)
    REFERENCES `ticketsonline`.`Place` (`idPlace`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Concert_has_Interpret`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Concert_has_Interpret` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Concert_has_Interpret` (
  `idConcert` INT NOT NULL,
  `idInterpret` INT NOT NULL,
  `headliner` TINYINT NOT NULL,
  PRIMARY KEY (`idConcert`, `idInterpret`),
  INDEX `fk_Concert_has_Interpret_Interpret1_idx` (`idInterpret` ASC),
  INDEX `fk_Concert_has_Interpret_Concert1_idx` (`idConcert` ASC),
  CONSTRAINT `fk_Concert_has_Interpret_Concert1`
    FOREIGN KEY (`idConcert`)
    REFERENCES `ticketsonline`.`Concert` (`idConcert`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Concert_has_Interpret_Interpret1`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Festival`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Festival` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Festival` (
  `idFestival` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`idFestival`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Year`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Year` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Year` (
  `idYear` INT NOT NULL AUTO_INCREMENT,
  `season` VARCHAR(255) NULL,
  `volume` INT NULL,
  `start` DATETIME NULL,
  `end` DATETIME NULL,
  `idFestival` INT NOT NULL,
  `idPlace` INT NOT NULL,
  PRIMARY KEY (`idYear`),
  INDEX `fk_Year_Festival1_idx` (`idFestival` ASC),
  INDEX `fk_Year_Place1_idx` (`idPlace` ASC),
  CONSTRAINT `fk_Year_Festival1`
    FOREIGN KEY (`idFestival`)
    REFERENCES `ticketsonline`.`Festival` (`idFestival`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Year_Place1`
    FOREIGN KEY (`idPlace`)
    REFERENCES `ticketsonline`.`Place` (`idPlace`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`User` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`User` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `surname` VARCHAR(255) NOT NULL,
  `birth` DATE NOT NULL,
  `address` VARCHAR(255) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `admin` TINYINT NOT NULL DEFAULT 0,
  `idCity` INT NOT NULL,
  PRIMARY KEY (`idUser`),
  INDEX `fk_User_City1_idx` (`idCity` ASC),
  CONSTRAINT `fk_User_City1`
    FOREIGN KEY (`idCity`)
    REFERENCES `ticketsonline`.`City` (`idCity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Ticket`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Ticket` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Ticket` (
  `idTicket` INT NOT NULL AUTO_INCREMENT,
  `price` INT NOT NULL,
  `bought` TINYINT NOT NULL DEFAULT 0,
  `idYear` INT NULL,
  `idConcert` INT NULL,
  `idUser` INT NULL,
  `type` ENUM("SIT", "STAND", "VIP") NOT NULL,
  PRIMARY KEY (`idTicket`),
  INDEX `fk_Ticket_Year1_idx` (`idYear` ASC),
  INDEX `fk_Ticket_Concert1_idx` (`idConcert` ASC),
  INDEX `fk_Ticket_User1_idx` (`idUser` ASC),
  CONSTRAINT `fk_Ticket_Year1`
    FOREIGN KEY (`idYear`)
    REFERENCES `ticketsonline`.`Year` (`idYear`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ticket_Concert1`
    FOREIGN KEY (`idConcert`)
    REFERENCES `ticketsonline`.`Concert` (`idConcert`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Ticket_User1`
    FOREIGN KEY (`idUser`)
    REFERENCES `ticketsonline`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Year_has_Interpret`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Year_has_Interpret` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Year_has_Interpret` (
  `idInterpret` INT NOT NULL,
  `idYear` INT NOT NULL,
  PRIMARY KEY (`idInterpret`, `idYear`),
  INDEX `fk_Interpret_has_Year_Year1_idx` (`idYear` ASC),
  INDEX `fk_Interpret_has_Year_Interpret1_idx` (`idInterpret` ASC),
  CONSTRAINT `fk_Interpret_has_Year_Interpret1`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Interpret_has_Year_Year1`
    FOREIGN KEY (`idYear`)
    REFERENCES `ticketsonline`.`Year` (`idYear`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Stage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Stage` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Stage` (
  `idStage` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `capacity` INT NULL,
  `capacityInterprets` INT NULL,
  `area_m2` INT NULL,
  PRIMARY KEY (`idStage`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Year_has_Stage`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Year_has_Stage` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Year_has_Stage` (
  `idYear` INT NOT NULL,
  `idStage` INT NOT NULL,
  PRIMARY KEY (`idYear`, `idStage`),
  INDEX `fk_Year_has_Stage_Stage1_idx` (`idStage` ASC),
  INDEX `fk_Year_has_Stage_Year1_idx` (`idYear` ASC),
  CONSTRAINT `fk_Year_has_Stage_Year1`
    FOREIGN KEY (`idYear`)
    REFERENCES `ticketsonline`.`Year` (`idYear`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Year_has_Stage_Stage1`
    FOREIGN KEY (`idStage`)
    REFERENCES `ticketsonline`.`Stage` (`idStage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`Stage_has_Interpret`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`Stage_has_Interpret` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`Stage_has_Interpret` (
  `idStage` INT NOT NULL,
  `idInterpret` INT NOT NULL,
  `headliner` TINYINT NOT NULL DEFAULT 0,
  `start` DATETIME NOT NULL,
  `end` DATETIME NOT NULL,
  PRIMARY KEY (`idStage`, `idInterpret`),
  INDEX `fk_Stage_has_Interpret_Interpret1_idx` (`idInterpret` ASC),
  INDEX `fk_Stage_has_Interpret_Stage1_idx` (`idStage` ASC),
  CONSTRAINT `fk_Stage_has_Interpret_Stage1`
    FOREIGN KEY (`idStage`)
    REFERENCES `ticketsonline`.`Stage` (`idStage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Stage_has_Interpret_Interpret1`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ticketsonline`.`User_has_Interpret`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ticketsonline`.`User_has_Interpret` ;

CREATE TABLE IF NOT EXISTS `ticketsonline`.`User_has_Interpret` (
  `idUser` INT NOT NULL,
  `idInterpret` INT NOT NULL,
  PRIMARY KEY (`idUser`, `idInterpret`),
  INDEX `fk_User_has_Interpret_Interpret1_idx` (`idInterpret` ASC),
  INDEX `fk_User_has_Interpret_User1_idx` (`idUser` ASC),
  CONSTRAINT `fk_User_has_Interpret_User1`
    FOREIGN KEY (`idUser`)
    REFERENCES `ticketsonline`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Interpret_Interpret1`
    FOREIGN KEY (`idInterpret`)
    REFERENCES `ticketsonline`.`Interpret` (`idInterpret`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



INSERT INTO Interpret(name, label, founded)
VALUES ("Slipknot", "http://1000logos.net/wp-content/uploads/2017/06/Slipknot-Logo.png", "1993-01-01");

INSERT INTO Genre(name) VALUES ('Nu metal');
INSERT INTO Genre(name) VALUES ('Alternative metal');
INSERT INTO Genre(name) VALUES ('Hard rock');

SET @interpretId = (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot');

INSERT INTO Album(name, `release`, label, idInterpret)
VALUES ('.5: The Gray Chapter', '2014-10-17', 'https://data.bontonland.cz/fotky/209/p-82664-full.jpg', @interpretId);

INSERT INTO Album(name, `release`, label, idInterpret)
VALUES ('All Hope Is Gone', '2008-08-20', 'https://www.fonodisco.es/228819/slipknot-all-hope-is-gone.jpg', @interpretId);

INSERT INTO Album(name, `release`, label, idInterpret)
VALUES ('Vol. 3: (The Subliminal Verses)', '2004-05-25', 'https://i.ebayimg.com/images/i/351407520120-0-1/s-l1000.jpg', @interpretId);

INSERT INTO Album_has_Genre(idAlbum, idGenre) VALUES (
  (SELECT idAlbum FROM Album WHERE name = 'All Hope Is Gone'),
  (SELECT idGenre FROM Genre WHERE name = 'Nu metal')
);

INSERT INTO Album_has_Genre(idAlbum, idGenre) VALUES (
  (SELECT idAlbum FROM Album WHERE name = '.5: The Gray Chapter'),
  (SELECT idGenre FROM Genre WHERE name = 'Nu metal')
);

INSERT INTO Album_has_Genre(idAlbum, idGenre) VALUES (
  (SELECT idAlbum FROM Album WHERE name = 'Vol. 3: (The Subliminal Verses)'),
  (SELECT idGenre FROM Genre WHERE name = 'Nu metal')
);

INSERT INTO Member(name, surname, birth) 
VALUES ('Corey', 'Taylor', '1973-12-08');

INSERT INTO Member(name, surname, birth)  
VALUES ('Sid', 'Wilson', '1977-01-20');

INSERT INTO Member(name, surname, birth) 
VALUES ('Jim', 'Root', '1971-10-02');

INSERT INTO Member(name, surname, birth)  
VALUES ('Craig', 'Jones', '1972-02-11');

INSERT INTO Member(name, surname, birth)  
VALUES ('Shawn', 'Crahan', '1969-09-24');

INSERT INTO Member(name, surname, birth)  
VALUES ('Mick', 'Thompson', '1973-11-03');

INSERT INTO Member(name, surname, birth)  
VALUES ('Alessandro', 'Venturella', '1978-03-07');

INSERT INTO Member(name, surname, birth)  
VALUES ('Jay', 'Weinberg', '1990-09-08');

INSERT INTO Member(name, surname, birth)  
VALUES ('Chris', 'Fehn', '1973-03-24');

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Chris' AND surname = 'Fehn'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Corey' AND surname = 'Taylor'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Mick' AND surname = 'Thompson'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Jay' AND surname = 'Weinberg'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Shawn' AND surname = 'Crahan'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Jim' AND surname = 'Root'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Sid' AND surname = 'Wilson'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Craig' AND surname = 'Jones'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot')
);


INSERT INTO City(name) VALUES ('Praha');
INSERT INTO City(name) VALUES ('Vizovice');

INSERT INTO Place(name, address, GPS, info, zipCode, idCity) 
VALUES ('O2 arena', 'Ceskomoravska 2345/17', '50°06''17.8"N 14°29''37.7"E', '', '19000', (SELECT idCity FROM City WHERE name = 'Praha'));


INSERT INTO Interpret(name, label, founded) 
VALUES ('Suicidal Tendencies', 'http://logonoid.com/images/suicidal-tendencies-logo.jpg', '1981-01-01');

SET @interpretId = (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies');

INSERT INTO Member(name, surname, birth) 
VALUES ('Ra', 'Diaz', NULL);

INSERT INTO Member(name, surname, birth) 
VALUES ('Jeff', 'Pogan', '1991-09-18');

INSERT INTO Member(name, surname, birth)  
VALUES ('Dean', 'Pleasants', '1965-05-18');

INSERT INTO Member(name, surname, birth) 
VALUES ('Dave', 'Lombardo', '1965-02-16');

INSERT INTO Member(name, surname, birth) 
VALUES ('Mike', 'Muir', '1963-03-14');


INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Ra' AND surname = 'Diaz'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Jeff' AND surname = 'Pogan'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Dean' AND surname = 'Pleasants'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Dave' AND surname = 'Lombardo'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies')
);

INSERT INTO Interpret_has_Member(idMember, idInterpret) VALUES (
  (SELECT idMember FROM Member WHERE name = 'Mike' AND surname = 'Muir'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies')
);


INSERT INTO Concert(name, `date`, capacity, idPlace) VALUES (
    'Slipknot koncert', '2016-01-27', 1000,
    (SELECT idPlace FROM Place WHERE name = 'O2 arena')
);

INSERT INTO Concert_has_Interpret(idConcert, idInterpret, headliner) VALUES(
  (SELECT idConcert FROM Concert WHERE name = 'Slipknot koncert'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Slipknot'),
  1
);

INSERT INTO Concert_has_Interpret(idConcert, idInterpret, headliner) VALUES(
  (SELECT idConcert FROM Concert WHERE name = 'Slipknot koncert'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Suicidal Tendencies'),
  0
);


INSERT INTO Interpret(name, label, founded) 
VALUES ('Stone Sour', 'https://i.pinimg.com/originals/51/6f/b0/516fb0de69307cdd34525bc345a69a1a.jpg', '1992-01-01');

INSERT INTO Album(name, `release`, label, idInterpret)
VALUES ('Stone Sour', '2002-08-27', 'https://www.bontonland.cz/image.php?image=/fotky/64/p-21095-full.jpg&width=375&height=375',
(
	SELECT idInterpret FROM Interpret
	WHERE name = 'Stone Sour'
));

INSERT INTO Album_has_Genre(idAlbum, idGenre) VALUES
(
  (SELECT idAlbum FROM Album WHERE name = 'Stone Sour'),
  (SELECT idGenre FROM Genre WHERE name = 'Hard rock')
);

INSERT INTO Album(name, `release`, label, idInterpret)
VALUES ('Hydrogradr', '2017-06-30', 'https://i2.wp.com/www.metalinjection.net/wp-content/uploads/2017/07/STSBN013.jpg?fit=700%2C700',
(
	SELECT idInterpret FROM Interpret
        WHERE name = 'Stone Sour'
));

INSERT INTO Album_has_Genre(idAlbum, idGenre) VALUES
(
  (SELECT idAlbum FROM Album WHERE name = 'Hydrogradr'),
  (SELECT idGenre FROM Genre WHERE name = 'Alternative metal')
);

INSERT INTO Interpret_has_Member (idMember, idInterpret) 
VALUES (
  (SELECT idMember FROM Member WHERE name = 'Corey' AND surname = 'Taylor'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Stone Sour')
);

INSERT INTO Member(name, surname, birth) 
VALUES ('Josh', 'Rand', '1974-08-19');

INSERT INTO Interpret_has_Member(idMember, idInterpret) 
VALUES (
  (SELECT idMember FROM Member WHERE name = 'Josh' AND surname = 'Rand'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Stone Sour')
);

INSERT INTO Member(name, surname, birth) 
VALUES ('Johny', 'Chow', '1972-02-01');

INSERT INTO Interpret_has_Member(idMember, idInterpret) 
VALUES (
  (SELECT idMember FROM Member WHERE name = 'Johny' AND surname = 'Chow'),
  (SELECT idInterpret FROM Interpret WHERE name = 'Stone Sour')
);





